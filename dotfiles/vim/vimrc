set modeline
set number
syntax on
set hlsearch

set enc=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf8,prc,utf-16,latin1

" Prefer LF line endings
set fileformats=unix,dos

" use "set eol" or "set noeol" to explicitly change the file's end-of-line format
set nofixendofline

" Show dos-only line endings on read-only files
" http://vim.wikia.com/wiki/Automatically_reload_files_with_mixed_line-endings_in_DOS_fileformat
autocmd BufReadPost * nested
  \ if !exists('b:reload_dos') && &ro && !&binary && &ff=='unix' && (0 < search('\r\%x00\?$', 'nc')) |
  \   let b:reload_dos = 1 |
  \   edit ++ff=dos |
  \   set ff=dos |
  \ endif

set statusline=
set statusline+=%f " Filename
set statusline+=%m " [+] or [-] when modified/unmodifiable
set statusline+=%r " [RO] when read-only
set statusline+=%h " [Help] when in help
set statusline+=%w " [Preview] when preview
set statusline+=\ [
set statusline+=%{&fenc!=''?&fenc:&enc} " File encoding
set statusline+=\| 
set statusline+=%{&ff} " Line endings
set statusline+=%{exists('b:reload_dos')?'*':''} " Mark re-interpreted
set statusline+=]
set statusline+=\ [
set statusline+=%Y " Filetype
set statusline+=]
set statusline+=%= " align right
set statusline+=%o " byte count at cursor
set statusline+=\ [%v,%l] " [virtual column v, line l]
set statusline+=(%p%%) " Percent (by line)

" Vim command prompt tab completion settings
set wildmode=list:longest
set wildmenu

set laststatus=2
set directory=.,$TEMP

" Disable backup/undo until cross-platform works better
"set backupdir=$TEMP
"set undodir=$TEMP
set nobackup
set noundofile

" Set indent behaviors
augroup indent_opts
  au BufEnter *
  \ syntax match Tab /\t/
  \ | hi Tab gui=underline guifg=blue ctermbg=blue
augroup END
set autoindent
set expandtab
set smarttab
set smartindent
set shiftwidth=2
set softtabstop=2
set tabstop=2

if has("multi_byte")
  set listchars=tab:╌╌▷,extends:❯,precedes:❮,trail:▕
else
  set listchars=tab:-->,extends:>,precedes:<
endif
set list

set tildeop

let mapleader = "\\"
let maplocalleader = "."

imap <f1> <esc>
map <f12> :set spell!<CR>
set nospell " No spell check by default
map <f11> :nohl<CR>

" Ctrl-V to paste in insert or command mode
" Use Ctrl-Q instaed to enter characters by number/unicode codepoint
noremap! <c-v> <c-r>+
" Ctrl-X/Ctrl-C/Ctrl-V to cut/copy/paste, respectively in visual mode
vnoremap <c-x> "+d
vnoremap <c-c> "+y
vnoremap <c-v> "+p

let g:netrw_nogx=1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

set mouse=a

let s:font = ""
if has("win32")
  let s:font = "Cascadia_Code:h<SIZE>:cANSI:qDRAFT,Cascadia_Mono:h<SIZE>:cANSI:qDRAFT,DejaVu_Sans_Mono:h<SIZE>:cANSI:qDRAFT,Consolas:h<SIZE>:cANSI"
elseif has("gui_gtk2") || has("gui_gtk3")
  let s:font = "Cascadia\ Code\ <SIZE>\,Cascadia\ Mono\ <SIZE>\,Fira\ Code\ Retina\ <SIZE>\,Fira\ Code\ <SIZE>\,DejaVu\ Sans\ Mono\ <SIZE>\,Monospace\ <SIZE>"
endif

if has("gui_running")

  let &guifont = substitute(s:font, "<SIZE>", "10", "g")
  set guioptions=egm

  function SetFTColor(force)
    if a:force || !exists('b:colors_name')
      if &ft == "text" || &ft == "txt" || &ft == ""
        let b:colors_name = 'autumn'
      elseif &ft == "xml"
        let b:colors_name = 'ir_black'
      elseif &ft == "dosini"
        let b:colors_name = 'evening'
      elseif &ft == "dosbatch"
        let b:colors_name = 'solarized'
        let b:bg_type = 'dark'
      elseif &ft == "ps1"
        let b:colors_name = 'codeschool'
      elseif &ft == "netrw"
        let b:colors_name = 'desert'
      elseif &ft == "todo"
        let b:colors_name = 'koehler'
      else
        let b:colors_name = 'solarized'
        let b:bg_type = 'dark'
      endif
    endif
    execute 'colorscheme' b:colors_name
    let g:colors_name = b:colors_name " workaround for themes like codeschool that sets to 'Code School 3'
    if exists('b:bg_type')
      let &background = b:bg_type
    endif
  endfunction

  " From http://stackoverflow.com/questions/6510481/colorscheme-change-when-filetype-changes
  augroup ft_colorscheme
    autocmd!
    autocmd FileType * call SetFTColor(1)
    autocmd BufEnter * call SetFTColor(0)
  augroup END
else
  colorscheme desert
endif

augroup ft_spellcheck
  autocmd!
  autocmd BufEnter * if &ft == "text" || &ft=="txt" || &ft == "" | set spell | else | set nospell
augroup END

filetype plugin on

" Print options
set printoptions=syntax:n,number:y
let &printfont = substitute(s:font, "<SIZE>", "8", "g")
